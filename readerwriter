#include <pthread.h>
#include <stdio.h>
#include <unistd.h>

pthread_mutex_t mutex;         // Mutex for synchronization of read_count
pthread_mutex_t write_mutex;   // Mutex to control access to writing (one writer at a time)
int read_count = 0;            // Number of active readers

// Reader function
void *reader(void *arg) {
    int reader_id = *((int *)arg);
    for (int i = 0; i < 3; i++) {  // Perform reading 3 times
        // Start Reading
        pthread_mutex_lock(&mutex);
        read_count++;
        if (read_count == 1) {
            pthread_mutex_lock(&write_mutex);  // Block writers if it's the first reader
        }
        pthread_mutex_unlock(&mutex);

        // Reading (critical section)
        printf("Reader %d is reading...\n", reader_id);
        sleep(1);  // Simulate reading time

        // Stop Reading
        pthread_mutex_lock(&mutex);
        read_count--;
        if (read_count == 0) {
            pthread_mutex_unlock(&write_mutex);  // Allow writers if no readers are left
        }
        pthread_mutex_unlock(&mutex);

        printf("Reader %d has finished reading.\n", reader_id);
        sleep(1);  // Simulate delay before reading again
    }
    return NULL;
}

// Writer function
void *writer(void *arg) {
    int writer_id = *((int *)arg);
    for (int i = 0; i < 3; i++) {  // Perform writing 3 times
        // Start Writing
        pthread_mutex_lock(&write_mutex);  // Lock the write_mutex to ensure only one writer at a time

        // Writing (critical section)
        printf("Writer %d is writing...\n", writer_id);
        sleep(2);  // Simulate writing time

        // Stop Writing
        pthread_mutex_unlock(&write_mutex);
        printf("Writer %d has finished writing.\n", writer_id);
        sleep(1);  // Simulate delay before writing again
    }
    return NULL;
}

int main() {
    pthread_t readers[3], writers[2];
    int reader_ids[3] = {1, 2, 3};
    int writer_ids[2] = {1, 2};

    // Initialize mutexes
    pthread_mutex_init(&mutex, NULL);
    pthread_mutex_init(&write_mutex, NULL);

    // Create reader threads
    for (int i = 0; i < 3; i++) {
        pthread_create(&readers[i], NULL, reader, &reader_ids[i]);
    }

    // Create writer threads
    for (int i = 0; i < 2; i++) {
        pthread_create(&writers[i], NULL, writer, &writer_ids[i]);
    }

    // Wait for threads to finish
    for (int i = 0; i < 3; i++) {
        pthread_join(readers[i], NULL);
    }
    for (int i = 0; i < 2; i++) {
        pthread_join(writers[i], NULL);
    }

    // Destroy mutexes
    pthread_mutex_destroy(&mutex);
    pthread_mutex_destroy(&write_mutex);

    printf("All readers and writers have finished.\n");
    return 0;
}


