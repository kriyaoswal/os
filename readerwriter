#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

pthread_mutex_t mutex;  // Mutex to protect shared resource
pthread_mutex_t write_mutex;  // Mutex to ensure that only one writer can write
int read_count = 0;  // Count of active readers

// Simulate reading the shared resource
void *reader(void *arg) {
    int id = *(int*)arg;

    while (1) {
        sleep(rand() % 3);

        // Acquire lock to read
        pthread_mutex_lock(&mutex);
        read_count++;  // One more reader
        if (read_count == 1) {
            pthread_mutex_lock(&write_mutex);  // Lock writers
        }
        pthread_mutex_unlock(&mutex);

        // Simulate reading
        printf("Reader %d is reading. Total readers: %d\n", id, read_count);
        sleep(rand() % 3);  // Simulate time taken to read

        pthread_mutex_lock(&mutex);
        read_count--;  // One less reader
        if (read_count == 0) {
            pthread_mutex_unlock(&write_mutex);  // Release writer lock
        }
        pthread_mutex_unlock(&mutex);

        printf("Reader %d finished reading. Total readers: %d\n", id, read_count);
    }
}

// Simulate writing to the shared resource
void *writer(void *arg) {
    int id = *(int*)arg;

    while (1) {
        sleep(rand() % 3 + 1);  // Writers wait longer to simulate writing

        // Acquire lock to write
        pthread_mutex_lock(&write_mutex);

        // Simulate writing
        printf("Writer %d is writing.\n", id);
        sleep(rand() % 3 + 1);  // Simulate time taken to write

        pthread_mutex_unlock(&write_mutex);

        printf("Writer %d finished writing.\n", id);
    }
}

int main() {
    pthread_t readers[5], writers[2];
    int reader_ids[5] = {1, 2, 3, 4, 5};
    int writer_ids[2] = {1, 2};

    // Initialize mutexes
    pthread_mutex_init(&mutex, NULL);
    pthread_mutex_init(&write_mutex, NULL);

    // Create reader and writer threads
    for (int i = 0; i < 5; i++) {
        pthread_create(&readers[i], NULL, reader, &reader_ids[i]);
    }

    for (int i = 0; i < 2; i++) {
        pthread_create(&writers[i], NULL, writer, &writer_ids[i]);
    }

    // Wait for all threads to finish (which in this case they won't, as they run indefinitely)
    for (int i = 0; i < 5; i++) {
        pthread_join(readers[i], NULL);
    }
    for (int i = 0; i < 2; i++) {
        pthread_join(writers[i], NULL);
    }

    // Destroy mutexes
    pthread_mutex_destroy(&mutex);
    pthread_mutex_destroy(&write_mutex);

    return 0;
}
