#include <stdio.h>
#include <pthread.h>
#include <unistd.h>

pthread_mutex_t lock;  // Mutex lock
pthread_cond_t canRead;  // Condition for readers
pthread_cond_t canWrite;  // Condition for writer

int readers = 0;  // Count of active readers
int isWriting = 0;  // Flag to track if a writer is writing

// Reader thread function
void* reader(void* arg) {
    int readerId = *((int*)arg);

    pthread_mutex_lock(&lock);  // Acquire the lock
    while (isWriting) {  // If a writer is writing, wait
        pthread_cond_wait(&canRead, &lock);
    }
    readers++;  // Increment the reader count
    printf("Reader %d is reading.\n", readerId);
    pthread_mutex_unlock(&lock);  // Release the lock

    sleep(1);  // Simulate reading time

    pthread_mutex_lock(&lock);  // Acquire the lock again to stop reading
    readers--;  // Decrement the reader count
    printf("Reader %d has finished reading.\n", readerId);
    if (readers == 0) {
        pthread_cond_signal(&canWrite);  // Signal the writer if no readers are left
    }
    pthread_mutex_unlock(&lock);  // Release the lock

    return NULL;
}

// Writer thread function
void* writer(void* arg) {
    int writerId = *((int*)arg);

    pthread_mutex_lock(&lock);  // Acquire the lock
    while (isWriting || readers > 0) {  // Wait if readers or another writer is active
        pthread_cond_wait(&canWrite, &lock);
    }
    isWriting = 1;  // Mark that a writer is writing
    printf("Writer %d is writing.\n", writerId);
    pthread_mutex_unlock(&lock);  // Release the lock

    sleep(2);  // Simulate writing time

    pthread_mutex_lock(&lock);  // Acquire the lock again to stop writing
    isWriting = 0;  // Mark that writing has stopped
    printf("Writer %d has finished writing.\n", writerId);
    pthread_cond_broadcast(&canRead);  // Signal all waiting readers
    pthread_cond_signal(&canWrite);  // Signal the next writer if waiting
    pthread_mutex_unlock(&lock);  // Release the lock

    return NULL;
}

int main() {
    pthread_t r1, r2, r3, w1, w2;
    int readerId1 = 1, readerId2 = 2, readerId3 = 3;
    int writerId1 = 1, writerId2 = 2;

    // Initialize mutex and condition variables
    pthread_mutex_init(&lock, NULL);
    pthread_cond_init(&canRead, NULL);
    pthread_cond_init(&canWrite, NULL);

    // Create and start multiple reader and writer threads
    pthread_create(&r1, NULL, reader, &readerId1);
    pthread_create(&r2, NULL, reader, &readerId2);
    pthread_create(&w1, NULL, writer, &writerId1);
    pthread_create(&r3, NULL, reader, &readerId3);
    pthread_create(&w2, NULL, writer, &writerId2);

    // Join threads
    pthread_join(r1, NULL);
    pthread_join(r2, NULL);
    pthread_join(w1, NULL);
    pthread_join(r3, NULL);
    pthread_join(w2, NULL);

    // Clean up mutex and condition variables
    pthread_mutex_destroy(&lock);
    pthread_cond_destroy(&canRead);
    pthread_cond_destroy(&canWrite);

    return 0;
}



