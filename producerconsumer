#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <stdlib.h>
#include <unistd.h>

#define BUFFER_SIZE 10

int buffer[BUFFER_SIZE];  // Shared buffer
int in = 0, out = 0;      // Indexes for producer and consumer

// Semaphore and mutex
sem_t empty, full;
pthread_mutex_t mutex;

void* producer(void* arg) {
    int item;
    while (1) {
        item = rand() % 100;  // Produce an item
        sem_wait(&empty);     // Wait for an empty slot
        pthread_mutex_lock(&mutex);  // Lock the buffer

        // Insert item into the buffer
        buffer[in] = item;
        printf("Producer produced: %d\n", item);
        in = (in + 1) % BUFFER_SIZE;

        pthread_mutex_unlock(&mutex);  // Unlock the buffer
        sem_post(&full);     // Signal that buffer has a full slot

        sleep(1);  // Simulate production time
    }
}

void* consumer(void* arg) {
    int item;
    while (1) {
        sem_wait(&full);  // Wait for a full slot
        pthread_mutex_lock(&mutex);  // Lock the buffer

        // Remove item from the buffer
        item = buffer[out];
        printf("Consumer consumed: %d\n", item);
        out = (out + 1) % BUFFER_SIZE;

        pthread_mutex_unlock(&mutex);  // Unlock the buffer
        sem_post(&empty);  // Signal that buffer has an empty slot

        sleep(1);  // Simulate consumption time
    }
}

int main() {
    pthread_t prodThread, consThread;

    // Initialize the semaphores
    sem_init(&empty, 0, BUFFER_SIZE);  // Initially, all slots are empty
    sem_init(&full, 0, 0);  // Initially, no slots are full

    // Initialize the mutex
    pthread_mutex_init(&mutex, NULL);

    // Create producer and consumer threads
    pthread_create(&prodThread, NULL, producer, NULL);
    pthread_create(&consThread, NULL, consumer, NULL);

    // Join the threads (this will never happen in this example)
    pthread_join(prodThread, NULL);
    pthread_join(consThread, NULL);

    // Clean up semaphores and mutex
    sem_destroy(&empty);
    sem_destroy(&full);
    pthread_mutex_destroy(&mutex);

    return 0;
}
